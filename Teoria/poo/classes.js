//Objetos s√£o inst√¢ncias de uma classe, ou seja a classe √© o molde e objetos s√£o criados apartir desse modo
//Classe:  Carro ; Objeto: Toyota
//Objetos tem atributos (caracteristicas) e A√ß√µes (Fun√ß√µes dentro de um objeto - Metodos)
class Carro {
  constructor(marca, modelo, cor) {
    this.marca = marca; // Atributo
    this.modelo = modelo;
    this.cor = cor;
    //This √© uma vari√°vel para entender o contexto com base no objeto que foi criado.
  }

  acelerar() { // M√©todo
    console.log(`${this.marca} est√° acelerando! üöóüí®`);
  }
}

const meuCarro = new Carro("Toyota", "Corolla", "Branco"); // O que est√° sendo colocado dentro do parenteses √© passado como parametros para nosso constructor
meuCarro.acelerar(); // Sa√≠da: Toyota est√° acelerando! üöóüí®
console.log(meuCarro.cor)

//Desafios 
// Crie uma classe chamada `Livro` com atributos `titulo`, `autor` e `ano`. Adicione um m√©todo para exibir os detalhes do livro.
class Livro{
    constructor(titulo, autor, ano){
        this.titulo = titulo;
        this.autor = autor;
        this.ano = ano;
    }
    detalhes(){
        console.log(`Essas s√£o as informa√ß√µes disponiv√©is referente ao livro: Seu t√≠tulo √©  "${this.titulo}", do autor(a) ${this.autor}, e o ano de lan√ßamento √©: ${this.ano}`)
    }
}
let livrito = new Livro("Caio de Medeiros - Tentanto ser algu√©m", "Caio Trindade", "2025")
livrito.detalhes()

// Implemente uma classe `ContaBancaria` com os m√©todos `depositar` e `sacar`.
class ContaBancaria{
    constructor(saldo){
        this.saldo = saldo
    }
    sacar(valor){

        if(valor >= this.saldo){
        console.log(`O valor de ${valor} que voc√™ deseja sacar n√£o ser√° liberado, pois ultrapassa o limite do seu saldo.`)
        }
        else{
        console.log(`Sacando ${valor} reais, aguarde.`)
        }
    }
    depositar(valor){
        console.log(`O valor de ${valor} foi depositado na sua conta, agora o nomo saldo √© ${this.saldo+valor}`)
    }
}
let saldo = 1000;
let valor = 999;
let depositar = 200;
let conta = new ContaBancaria(saldo)
conta.sacar(valor)
conta.depositar(depositar)

//Crie uma classe `Pessoa` com um m√©todo que exibe "Bem-vindo, [nome]!".
class Pessoa{
    constructor(nome){
        this.nome = nome
    }
    saudacao(){
        console.log(`Bem-vindo, ${this.nome}`)
    }
}
const melhor = new Pessoa("Caio Trindade de Medeiros")
melhor.saudacao()
//Implemente uma classe `Calculadora` com m√©todos para soma, subtra√ß√£o, multiplica√ß√£o e divis√£o.
class Calculadora{
    constructor(n1,n2){
        this.n1 = n1;
        this.n2 = n2;
    }
    somar(){
        console.log((`A soma de ${this.n1} e ${this.n2} √© igual a ${this.n1+this.n2}`))
    }
    sub(){
console.log((`A subtra√ß√£o de ${this.n1} e ${this.n2} √© igual a ${this.n1-this.n2}`))
    }
    mult(){
console.log((`A multplica√ß√£o de ${this.n1} e ${this.n2} √© igual a ${this.n1*this.n2}`))
    }
    div(){
    console.log((`A divis√£o de ${this.n1} por ${this.n2} √© igual a ${this.n1/this.n2}`))

    }
}
const n1 = 100; 
const n2 = 5;
let calcultador = new Calculadora(n1, n2)
calcultador.somar()
calcultador.sub()
calcultador.mult()
calcultador.div()
//Crie uma classe `Agenda` para armazenar e exibir contatos.
let contatos = ["Mam√£e, Ribamar, Pedro, Beneboy, Bianca"]
class Agenda{
    constructor(nome, contatinhos)
    {
        this.nome = nome
        this.contatinhos = contatinhos
    }
adicionar(nome_contato){
    this.contatinhos.push(nome_contato)
    console.log(`${nome_contato} foi adicionado a lista de contatos. Sua lista de contatos agora √©: ${this.contatinhos}`)
}
mostrar(){
    console.log(`Ol√°, ${this.nome}. Sua lista de contatos √©: ${this.contatinhos}`)
}
}
let contatos_caio = new Agenda("Caio Trindade", contatos)
contatos_caio.mostrar()
contatos_caio.adicionar("Ana Mello")
contatos_caio.mostrar()